// page source --->>> https://leetcode.com/problems/path-sum-iii/


class Solution {
    int count = 0;
    public int pathSum(TreeNode root, int targetSum) {
        
        countTarget_temp(root , targetSum);
        return count;
    }
    public void countTarget_temp(TreeNode node , int targetSum){
        if(node == null){
            return;
        }
        //if(node.val == -2)
        countTarget(node , 0 , targetSum);
        
        countTarget_temp(node.left , targetSum);
        countTarget_temp(node.right , targetSum);
    }
    
    public void countTarget(TreeNode node , long csum , int targetSum){
        if(node == null){

            return;
        }
        //System.out.println(node.val + " " + csum);
        if(csum+node.val == targetSum){
            //System.out.println(csum  + " " + node.val);
            count++;
        }
        countTarget(node.left , csum+node.val , targetSum);
        countTarget(node.right , csum+node.val , targetSum);
    }
}




// alternate method but having some issues


class Solution {
    int count = 0;
    public int pathSum(TreeNode root, int targetSum) {
        if(targetSum == 0){
            return 0;
        }
        if(root == null){
            return 0;
        }
        HashMap<Integer , Integer> map = new HashMap<>();
        map.put(0 , 1);
        CountPathSum(root , root.val , targetSum , map);
        return count;
    }
    
    public void CountPathSum(TreeNode node, int sum, int tar, HashMap<Integer , Integer> map){
        if(map.containsKey(sum - tar)){
            count = count + map.get(sum-tar);
        }
        
        if(map.containsKey(sum)){
            map.put(sum , map.get(sum)+1);
        }else{
            map.put(sum , 1);
        }
        
        if(node.left != null)
            CountPathSum(node.left , sum + node.left.val , tar , map);
        
        if(node.right != null)
            CountPathSum(node.right , sum + node.right.val , tar , map);
        
        if(map.get(sum) == 1){
            map.remove(sum);
        }else{
            map.put(sum , map.get(sum) - 1);
        }
    }
}
