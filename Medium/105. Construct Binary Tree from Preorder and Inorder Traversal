//Page source --->>> https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/

class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        HashMap<Integer , Integer> hm = new HashMap<>();
        for(int i = 0 ; i < inorder.length ; i++){
            int val = inorder[i];
            hm.put(val , i);
        }
        TreeNode root = construct(0 , preorder.length-1 , 0 , inorder.length-1 , preorder , hm);
        return root;
    }
    public static TreeNode construct(int pre_lo, int pre_hi, int in_lo ,int in_hi, int []pre, HashMap<Integer , Integer> hm){
        if(pre_lo > pre_hi || in_lo > in_hi){
            return null;
        }
       TreeNode node = new TreeNode();
       
        node.val = pre[pre_lo];
        
        int index = hm.get(pre[pre_lo]);
        int lhs = index-in_lo;
        
        node.left = construct(pre_lo + 1 , pre_lo + lhs  , in_lo , index-1 , pre , hm);
        node.right = construct(pre_lo + lhs+ 1 , pre_hi , index+1 , in_hi , pre , hm);
        
        return node;
    }
}
