//Page source ---->>> https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/


class Solution {
    
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        HashMap<Integer , Integer> hm = new HashMap<>();
        for(int i = 0 ; i < inorder.length ; i++){
            int val = inorder[i];
            hm.put(val , i);
        }
        TreeNode root = construct(0 , postorder.length-1 , 0 , inorder.length-1 , postorder , hm);
        return root;
    }
    public static TreeNode construct(int post_lo, int post_hi, int in_lo ,int in_hi, int []post, HashMap<Integer , Integer> hm){
        if(post_lo > post_hi || in_lo > in_hi){
            return null;
        }
       TreeNode node = new TreeNode();
       
        node.val = post[post_hi];
        
        int index = hm.get(post[post_hi]);
        int rhs = in_hi - index;
        
        node.left = construct(post_lo , post_hi - rhs - 1  , in_lo , index-1 , post , hm);
        node.right = construct(post_hi - rhs , post_hi -1 , index+1 , in_hi , post , hm);
        
        return node;
    }
}
