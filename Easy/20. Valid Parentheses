// page source ------>>>>>> https://leetcode.com/problems/valid-parentheses


**********************************************************************************Method1**********************************************************************************
class Solution {
    public boolean isValid(String s) {
        Stack<Character> st = new Stack<>();
        for(int i = 0 ; i < s.length() ; i++){
            char ch = s.charAt(i);
            
            if(s.length() == 1 || s.length() == 0){
                return false;
            }
            
            if(ch == '(' || ch == '{' || ch == '['){
                st.push(ch);
            }else if(ch == ')'){
                if(st.size() > 0 && st.peek() == '('){
                    st.pop();
                }else{
                    return false;
                }
            }else if(ch == '}'){
                if(st.size() > 0 && st.peek() == '{'){
                    st.pop();
                }else{
                    return false;
                }
                
            }else if(ch == ']'){
                if(st.size() > 0 && st.peek() == '['){
                    st.pop();
                }else{
                    return false;
                }
                
            }
        }
          if(st.size() > 0){
              return false;
          }else{
              return true;
          }
    }
}





**********************************************************************************Method2**********************************************************************************

public boolean isValid(String s) {
	Stack<Character> stack = new Stack<Character>();
	for (char c : s.toCharArray()) {
		if (c == '(')
			stack.push(')');
		else if (c == '{')
			stack.push('}');
		else if (c == '[')
			stack.push(']');
		else if (stack.isEmpty() || stack.pop() != c)
			return false;
	}
	return stack.isEmpty();
}
