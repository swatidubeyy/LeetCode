//Page source --- >>> https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/



class Solution {
    static class Pair implements Comparable<Pair>{
        TreeNode node;
        int w;
        int d;
        
        Pair(TreeNode node , int w , int d){
            this.node = node;
            this.w = w;
            this.d = d;
        }
        public int compareTo(Pair other){
            if(this.d == other.d){
                return this.node.val - other.node.val;   
            }else{
                return this.d - other.d;
            }
        }
    }
    public List<List<Integer>> verticalTraversal(TreeNode root) {
        Queue<Pair> mq = new LinkedList<>();
        HashMap<Integer , PriorityQueue> hm = new HashMap<>();
        mq.add(new Pair(root , 0 , 1));
        int lw = 0 , rw = 0;
        while(mq.size() > 0){
            Pair temp = mq.remove();
            
            if(temp.w < lw){
                lw = temp.w;
            }
            
            if(temp.w > rw){
                rw = temp.w;
            }
            
            if(hm.containsKey(temp.w) == false){
                hm.put(temp.w , new PriorityQueue<>());
                hm.get(temp.w).add(temp);
            }else{
                hm.get(temp.w).add(temp);    
            }
            
            if(temp.node.left != null){
                mq.add(new Pair(temp.node.left , temp.w-1 , temp.d+1));
            }
            
            if(temp.node.right != null){
                mq.add(new Pair(temp.node.right , temp.w+1 , temp.d+1));
            }
        }
        
        int idx = 0;
        ArrayList<List<Integer>> al= new ArrayList<>();
        
        for(int i = lw ; i <= rw ; i++){
            ArrayList<Integer> list = new ArrayList<>();
            PriorityQueue<Pair> pq = hm.get(i);
            while(pq.size() > 0){
                list.add(pq.remove().node.val);    
            }   
            al.add(list);
            idx++;
        }
        return al;
    }
}
